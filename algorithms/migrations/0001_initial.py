# Generated by Django 5.2.6 on 2025-10-03 20:21

import django.db.models.deletion
from django.conf import settings
from django.db import migrations, models


class Migration(migrations.Migration):

    initial = True

    dependencies = [
        migrations.swappable_dependency(settings.AUTH_USER_MODEL),
    ]

    operations = [
        migrations.CreateModel(
            name="CustomProblem",
            fields=[
                (
                    "id",
                    models.BigAutoField(
                        auto_created=True,
                        primary_key=True,
                        serialize=False,
                        verbose_name="ID",
                    ),
                ),
                ("name", models.CharField(max_length=200, unique=True)),
                ("description", models.TextField(blank=True)),
                (
                    "problem_type",
                    models.CharField(
                        choices=[
                            ("continuous", "Continuous Optimization"),
                            ("combinatorial", "Combinatorial Optimization"),
                        ],
                        max_length=20,
                    ),
                ),
                ("function_code", models.TextField(help_text="Python function code")),
                ("bounds_lower", models.FloatField(blank=True, null=True)),
                ("bounds_upper", models.FloatField(blank=True, null=True)),
                ("dimensions", models.IntegerField(default=2)),
                ("created_at", models.DateTimeField(auto_now_add=True)),
                ("is_public", models.BooleanField(default=False)),
                ("usage_count", models.IntegerField(default=0)),
                (
                    "created_by",
                    models.ForeignKey(
                        blank=True,
                        null=True,
                        on_delete=django.db.models.deletion.SET_NULL,
                        to=settings.AUTH_USER_MODEL,
                    ),
                ),
            ],
            options={
                "ordering": ["-created_at"],
            },
        ),
        migrations.CreateModel(
            name="AlgorithmRecommendation",
            fields=[
                (
                    "id",
                    models.BigAutoField(
                        auto_created=True,
                        primary_key=True,
                        serialize=False,
                        verbose_name="ID",
                    ),
                ),
                ("problem_name", models.CharField(max_length=200)),
                ("recommended_algorithm", models.CharField(max_length=20)),
                ("confidence", models.FloatField()),
                ("reason", models.TextField()),
                (
                    "problem_features",
                    models.JSONField(help_text="Extracted problem features"),
                ),
                (
                    "alternative_algorithms",
                    models.JSONField(help_text="List of alternative algorithms"),
                ),
                ("created_at", models.DateTimeField(auto_now_add=True)),
                (
                    "custom_problem",
                    models.ForeignKey(
                        blank=True,
                        null=True,
                        on_delete=django.db.models.deletion.CASCADE,
                        to="algorithms.customproblem",
                    ),
                ),
            ],
            options={
                "ordering": ["-created_at"],
            },
        ),
        migrations.CreateModel(
            name="GeneratedAlgorithm",
            fields=[
                (
                    "id",
                    models.BigAutoField(
                        auto_created=True,
                        primary_key=True,
                        serialize=False,
                        verbose_name="ID",
                    ),
                ),
                ("name", models.CharField(max_length=200, unique=True)),
                ("description", models.TextField(blank=True)),
                (
                    "components",
                    models.JSONField(help_text="Algorithm components and parameters"),
                ),
                ("population_size", models.IntegerField(default=50)),
                ("performance_score", models.FloatField(blank=True, null=True)),
                ("created_at", models.DateTimeField(auto_now_add=True)),
                (
                    "is_evolved",
                    models.BooleanField(
                        default=False, help_text="Was this algorithm evolved?"
                    ),
                ),
                (
                    "generation",
                    models.IntegerField(
                        default=0, help_text="Generation number if evolved"
                    ),
                ),
                (
                    "parent_algorithm",
                    models.ForeignKey(
                        blank=True,
                        null=True,
                        on_delete=django.db.models.deletion.SET_NULL,
                        to="algorithms.generatedalgorithm",
                    ),
                ),
            ],
            options={
                "ordering": ["-performance_score", "-created_at"],
            },
        ),
        migrations.CreateModel(
            name="OptimizationRun",
            fields=[
                (
                    "id",
                    models.BigAutoField(
                        auto_created=True,
                        primary_key=True,
                        serialize=False,
                        verbose_name="ID",
                    ),
                ),
                (
                    "algorithm",
                    models.CharField(
                        choices=[
                            ("ga", "Genetic Algorithm"),
                            ("pso", "Particle Swarm Optimization"),
                            ("aco", "Ant Colony Optimization"),
                            ("tlbo", "Teaching-Learning-Based Optimization"),
                            ("ts", "Tabu Search"),
                            ("generated", "Generated Algorithm"),
                        ],
                        max_length=20,
                    ),
                ),
                ("problem_name", models.CharField(max_length=200)),
                ("iterations", models.IntegerField(default=100)),
                ("population_size", models.IntegerField(default=50)),
                ("best_fitness", models.FloatField()),
                ("best_solution", models.JSONField()),
                ("convergence_history", models.JSONField()),
                (
                    "execution_time",
                    models.FloatField(help_text="Execution time in seconds"),
                ),
                ("created_at", models.DateTimeField(auto_now_add=True)),
                (
                    "custom_problem",
                    models.ForeignKey(
                        blank=True,
                        null=True,
                        on_delete=django.db.models.deletion.SET_NULL,
                        to="algorithms.customproblem",
                    ),
                ),
                (
                    "generated_algorithm",
                    models.ForeignKey(
                        blank=True,
                        null=True,
                        on_delete=django.db.models.deletion.SET_NULL,
                        to="algorithms.generatedalgorithm",
                    ),
                ),
                (
                    "user",
                    models.ForeignKey(
                        blank=True,
                        null=True,
                        on_delete=django.db.models.deletion.SET_NULL,
                        to=settings.AUTH_USER_MODEL,
                    ),
                ),
            ],
            options={
                "ordering": ["-created_at"],
            },
        ),
    ]
